datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  firstName     String?
  lastName      String?
  email         String    @unique
  calendars     Calendar[]
  events        Event[]
  teams         TeamMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Calendar {
  id          String    @id @default(cuid())
  name        String
  color       String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  events      Event[]
  teamId      String?
  team        Team?     @relation(fields: [teamId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isRecurring Boolean   @default(false)
  recurrence  Json?     // Store recurrence rules
  metadata    Json?     // Store additional data like category
  calendarId  String
  calendar    Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  attendees   EventAttendee[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([calendarId])
  @@index([userId])
}

model EventAttendee {
  id        String    @id @default(cuid())
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id])
  email     String
  status    String    // "pending", "accepted", "declined"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([eventId, email])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  members     TeamMember[]
  calendars   Calendar[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TeamMember {
  id        String    @id @default(cuid())
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  role      String    // "admin", "member"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([teamId, userId])
} 